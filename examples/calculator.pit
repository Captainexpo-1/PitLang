fn generate_token(name, type) {
    let token = {
        value: name,
        type: type
    };
    return token;
}

fn dump_ast(ast, indent) {
    std.print("Dumping AST\n");
    let stack = [];
    let i = 0;
    while (i < ast.value.length()) {
        let token = ast.value.get(i);
        if (token.type == "number") {
            stack.push(token);
        } else if (token.type == "operator") {
            let right = stack.pop();
            let left = stack.pop();
            let expression = {
                type: "expression",
                value: [left, token, right]
            };
            stack.push(expression);
        }
        i = i + 1;
    }

    fn print_expression(expression, indent) {
        if (expression.type == "number") {
            std.print(indent, "Number: ", expression.value, "\n");
        } else if (expression.type == "expression") {
            std.print(indent, "Expression\n");
            print_expression(expression.value.get(0), indent + "  ");
            std.print(indent + "  ", "Operator: ", expression.value.get(1).value, "\n");
            print_expression(expression.value.get(2), indent + "  ");
        }
    }

    if (stack.length() > 0) {
        print_expression(stack.get(0), indent);
    }
}



fn tokenize(input) {
    let tokens = [];
    let i = 0;
    while (i < input.length()) {
        let char = input.get(i);
        if ((char == "(") || (char == ")")) {
            tokens.push(generate_token(char, "parenthesis"));
        } else if ((char == "+") || (char == "-") || (char == "*") || (char == "/")) {
            tokens.push(generate_token(char, "operator"));
        } else if (char.ord() >= "0".ord() && char.ord() <= "9".ord()) {
            let number = char;
            let j = i + 1;
            let b = false;
            while ((j < input.length()) && !b) {
                if (!((input.get(j).ord() < "0".ord()) || ((input.get(j).ord()) > ("9".ord())))) {
                    number = number + input.get(j);
                    j = j + 1;
                }
                else {
                    b = true;
                }

            }
            tokens.push(generate_token(number.to_float(), "number"));
            i = j - 1;
        }
        i = i + 1;
    }
    return tokens;
}

fn parse_expression(tokens) {
    let i = 0;
    let expression = {
        type: "expression",
        value: []
    };
    let operator_stack = [];
    let output_queue = [];

    while (i < tokens.length()) {
        let token = tokens.get(i);
        if (token.type == "number") {
            output_queue.push(token);
        } else if (operator_stack.length() <= 0) {
            operator_stack.push(token);
        }
        else if (token.type == "operator") {
            while (precedence(operator_stack.get(-1).value) >= precedence(token.value)) {
                output_queue.push(operator_stack.pop());
            }
            operator_stack.push(token);
        } else if (token.type == "parenthesis") {
            if (token.value == "(") {
                operator_stack.push(token);
            } else if (token.value == ")") {
                while ((operator_stack.length() > 0) && (operator_stack.get(-1).value != "(")) {
                    output_queue.push(operator_stack.pop());
                }
                operator_stack.pop(); // Remove the "(" from the stack
            }
        }
        i = i + 1;
    }

    while (operator_stack.length() > 0) {
        output_queue.push(operator_stack.pop());
    }

    expression.value = output_queue;
    return expression;
}
fn evaluate_expression(expression) {
    let stack = [];
    let i = 0;
    while (i < expression.value.length()) {
        let token = expression.value.get(i);

        if (token.type == "number") {
            stack.push(token);
        }
        else if (token.type == "operator") {
            let right = stack.pop().value;
            let left = stack.pop().value;
            let result = 0;
            if (token.value == "+") {
                result = left + right;
            } else if (token.value == "-") {
                result = left - right;
            } else if (token.value == "*") {
                result = left * right;
            } else if (token.value == "/") {
                result = left / right;
            }
            stack.push(generate_token(result, "number"));
        }

        i = i + 1;
    }
    return stack.get(0);
}
fn precedence(op) {
    if (op == "+" || op == "-") {
        return 1;
    } else if (op == "*" || op == "/") {
        return 2;
    }
    return 0;
}


fn main() {
    let tokens = tokenize(std.argv().get(2)); // Get the input from the command line
    let expression = parse_expression(tokens);
    let result = evaluate_expression(expression);
    std.print(result.value);
}

main();