fn generate_token(name, type) {
    let token = {
        value: name,
        type: type
    };
    return token;
}


fn dump_ast(ast, indent) {
    std.print("Dumping AST\n");
    let stack = [];
    let i = 0;
    while (i < ast.value.length()) {
        let token = ast.value.get(i);
        if (token.type == "number") {
            stack.push(token);
        } else if (token.type == "operator") {
            let right = stack.pop();
            let left = stack.pop();
            let expression = {
                type: "expression",
                value: [left, token, right]
            };
            stack.push(expression);
        }
        i = i + 1;
    }

    fn print_expression(expression, indent) {
        if (expression.type == "number") {
            std.print(indent, "Number: ", expression.value, "\n");
        } else if (expression.type == "expression") {
            std.print(indent, "Expression\n");
            print_expression(expression.value.get(0), indent + "  ");
            std.print(indent + "  ", "Operator: ", expression.value.get(1).value, "\n");
            print_expression(expression.value.get(2), indent + "  ");
        }
    }

    if (stack.length() > 0) {
        print_expression(stack.get(0), indent);
    }
}



fn tokenize(input) {
    let tokens = [];
    let i = 0;
    while (i < input.length()) {
        let char = input.get(i);
        if (char == "(" || char == ")") {
            tokens.push(generate_token(char, "parenthesis"));
        } else if (char == "+" || char == "-" || char == "*" || char == "/" || char == "%" || char == "^") {
            tokens.push(generate_token(char, "operator"));
        } else if (char.ord() >= "0".ord() && char.ord() <= "9".ord()) {
            let number = char;
            let j = i + 1;
            let b = false;
            while ((j < input.length()) && !b) {
                if (input.get(j).ord() >= "0".ord() && input.get(j).ord() <= "9".ord()) {
                    number = number + input.get(j);
                    j = j + 1;
                }
                else if (input.get(j) == ".") {
                    number = number + ".";
                    j = j + 1;
                }
                else {
                    b = true;
                }

            }
            tokens.push(generate_token(number.to_float(), "number"));
            i = j - 1;
        }
        else if (char != " " && char != "\t" && char != "\n" && char != "\r") {
            std.println("Invalid character: '", char, "'");
            return null;
        }
        i = i + 1;
    }
    return tokens;
}

fn parse_expression(tokens) {
    let output = [];
    let stack = [];
    let i = 0;
    while (i < tokens.length()) {
        let token = tokens.get(i);
        if (token.type == "number") {
            output.push(token);
        } else if (token.type == "operator") {
            while (stack.length() > 0 && precedence(token.value) <= precedence(stack.get(stack.length() - 1).value)) {
                output.push(stack.pop());
            }
            stack.push(token);
        } else if (token.value == "(") {
            stack.push(token);
        } else if (token.value == ")") {
            while (stack.length() > 0 && stack.get(stack.length() - 1).value != "(") {
                output.push(stack.pop());
            }
            stack.pop();
        }
        i = i + 1;
    }
    while (stack.length() > 0) {
        output.push(stack.pop());
    }
    return generate_token(output, "expression");
}
fn evaluate_expression(expression) {
    let stack = [];
    let i = 0;
    while (i < expression.value.length()) {
        let token = expression.value.get(i);
        if (token.type == "number") {
            stack.push(token);
        }
        else if (token.type == "operator") {

            if stack.length() < 2 {
                std.println("Error: not enough operands for operator");
                return null;
            }

            let right = stack.pop().value;
            let left = stack.pop().value;

            let result = 0;
            if (token.value == "+") {
                result = left + right;
            } else if (token.value == "-") {
                result = left - right;
            } else if (token.value == "*") {
                result = left * right;
            } else if (token.value == "/") {
                result = left / right;
            } else if (token.value == "%") {
                result = left % right;
            }
            else if (token.value == "^") {
                let j = 0;
                result = 1;
                while (j < right) {
                    result = result * left;
                    j = j + 1;
                }
            }
            stack.push(generate_token(result, "number"));
        }

        i = i + 1;
    }
    return stack.get(0);
}
fn precedence(op) {
    if (op == "+" || op == "-") {
        return 1;
    } else if (op == "*" || op == "/" || op == "%") {
        return 2;
    }
    else if (op == "^") {
        return 3;
    }
    return 0;
}


fn run_input(input) {
    let tokens = tokenize(input);
    if tokens == null {
        return "Error tokenizing input";
    }
    let expression = parse_expression(tokens);
    if expression == null {
        return "Error parsing expression";
    }
    let result = evaluate_expression(expression);
    if result == null {
        return "Error evaluating expression";
    }
    return result.value;
}

fn main() {
    let stop = false;
    while !stop {
        std.print("> ");
        let input = std.get_line();
        if input.find("exit") != -1 {
            stop = true;
        } else if input.find("file") != -1 {
            std.print("Enter filename: ");
            let filename = std.get_line();
            let content = std.read_file(filename);
            if content != null {
                let result = run_input(content);
                std.println(result);
            }
            else {
                std.println("There was an error reading the file");
            }
        } 
        else {
            let result = run_input(input);
            std.println(result);
        }
    }
}

main();