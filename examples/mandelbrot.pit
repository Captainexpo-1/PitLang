let grad = [" ", ".", ",", "-", "~", ":", ";", "=", "!", "*", "#", "$", "@", "B", "%", "W", "&", "M"];
fn get_gradient(t) {
    if t < 0 {
        return grad.get(0);
    }
    if t >= grad.length() {
        return grad.get(-1);
    }
    return grad.get(t);
}

fn imaginary(a_0, b_0) {
    return {
        a: a_0,
        b: b_0
    };
}

fn imaginary_squared(num) {
    //(a + bi)^2 = (a^2 - b^2) + 2abi
    return imaginary(num.a*num.a - num.b*num.b, 2*num.a*num.b);
}

fn imaginary_add(num1, num2) {
    return imaginary(num1.a + num2.a, num1.b + num2.b);
}

fn imaginary_abs(i){
    return i.a*i.a + i.b*i.b;
}

// z(n) = (z(n - 1))^2 + c
// z(0) = 0
fn mandelbrot(cx, cy, width, height, max_iter) {
    fn recurse(n, c) {
        if n == 0 {
            return c;
        }
        return imaginary_add(imaginary_squared(recurse(n - 1, c)), c);
    }
    let x = cx - width;
    let y = cy + height;
    let x_step = width / 100;
    let y_step = height / 100;

    let s = "";

    let i = 0;
    while i < 100 {
        let j = 0;
        while j < 100 {
            let c = imaginary(x, y);
            let z = recurse(max_iter, imaginary(0, 0));
            let k = 0;
            let break = false;
            while k < max_iter && !break {
                if imaginary_abs(z) > 4 {
                    break = true;
                }
                else {
                    z = imaginary_add(imaginary_squared(z), c);
                    k = k + 1;
                }
            }
            if k == max_iter {
                std.print("â¬œ");
            } else {
                std.print(get_gradient(k));
            }
            x = x + x_step;
            j = j + 1;
        }
        std.print("\n");
        x = cx - width / 2;
        y = y - y_step;
        i = i + 1;
    }
}

fn main() {
    let args = std.argv();
    if args.length() < 5 {
        std.println("Usage: pitlang mandelbrot.pit <cx> <cy> <width> <height> <max_iter>")
        return;
    }
    let cx = args.get(2).to_float();
    let cy = args.get(3).to_float();
    let width = args.get(4).to_float();
    let height = args.get(5).to_float();
    let max_iter = args.get(6).to_int();
    mandelbrot(cx, cy, width, height, max_iter);
}

main();