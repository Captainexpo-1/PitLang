let grad = [" ", ".", ",", "-", "~", ":", ";", "=", "!", "*", "#", "$", "@", "B", "%", "W", "&", "M"];
fn get_gradient(t) {
    if t < 0 {
        return grad.get(0);
    }
    if t >= grad.length() {
        return grad.get(-1);
    }
    return grad.get(t);
}

fn imaginary(a_0, b_0) {
    return {
        a: a_0,
        b: b_0
    };
}

fn imaginary_squared(num) {
    //(a + bi)^2 = (a^2 - b^2) + 2abi
    return imaginary(num.a*num.a - num.b*num.b, 2*num.a*num.b);
}

fn imaginary_add(num1, num2) {
    return imaginary(num1.a + num2.a, num1.b + num2.b);
}

fn imaginary_abs(i){
    return i.a*i.a + i.b*i.b;
}

// z(n) = (z(n - 1))^2 + c
// z(0) = 0
fn mandelbrot(cx, cy, width, height, max_iter) {
    fn recurse(n, c) {
        if n == 0 {
            return c;
        }
        return imaginary_add(imaginary_squared(recurse(n - 1, c)), c);
    }
    fn get_iterations(x, y, lim, max_iter) {
        let z = imaginary(0, 0);
        let c = imaginary(x, y);
        for let i = 0; i < max_iter; ++i; {
            z = imaginary_add(imaginary_squared(z), c);
            if imaginary_abs(z) > lim {
                return i;
            }
        }
        return max_iter;
    }
    let x = cx - width / 2;
    let y = cy + height / 2;
    let x_step = width / 100;
    let y_step = height / 50;

    for let y = cy + height / 2; y >= cy - height / 2; y = y - y_step; {
        for let x = cx - width / 2; x <= cx + width / 2; x = x + x_step; {
            let iter = get_iterations(x, y, 4, max_iter);
            let grad_index = (iter * grad.length()) / max_iter;
            std.print(get_gradient(grad_index));
        }
        std.println();
    }   
}

fn main() {
    let args = std.argv();
    if args.length() < 7 {
        std.println("Usage: pitlang mandelbrot.pit <cx> <cy> <width> <height> <max_iter>")
        return;
    }
    let cx = args.get(2).to_float();
    let cy = args.get(3).to_float();
    let width = args.get(4).to_float();
    let height = args.get(5).to_float();
    let max_iter = args.get(6).to_int();
    mandelbrot(cx, cy, width, height, max_iter);
}

main();